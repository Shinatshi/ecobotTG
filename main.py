import telebot
import random
import requests
from telebot import types
from config import TOKEN
from eco_parser import get_random_eco_news

bot = telebot.TeleBot(TOKEN)

user_quiz_progress = {}
eco_tips = [
    "üå± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–µ —Å—É–º–∫–∏ –≤–º–µ—Å—Ç–æ –ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã—Ö –ø–∞–∫–µ—Ç–æ–≤.",
    "üíß –≠–∫–æ–Ω–æ–º—å—Ç–µ –≤–æ–¥—É: –≤—ã–∫–ª—é—á–∞–π—Ç–µ –∫—Ä–∞–Ω, –∫–æ–≥–¥–∞ —á–∏—Å—Ç–∏—Ç–µ –∑—É–±—ã.",
    "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–≥–∞—é—â–∏–µ –ª–∞–º–ø—ã.",
    "‚ôªÔ∏è –°–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –º—É—Å–æ—Ä –∏ —Å–¥–∞–≤–∞–π—Ç–µ –æ—Ç—Ö–æ–¥—ã –Ω–∞ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫—É.",
    "üö¥ –û—Ç–¥–∞–≤–∞–π—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–º—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É –∏–ª–∏ –≤–µ–ª–æ—Å–∏–ø–µ–¥—É."
]

quiz_questions = [
    {
        "question": "üóë –ö–∞–∫–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø–ª–∞—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –º–∏—Ä–µ?",
        "options": ["9%", "20%", "35%", "50%"],
        "correct": 0
    },
    {
        "question": "üêª –ö–∞–∫–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ —Å–∏–º–≤–æ–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª–∏–º–∞—Ç–∞?",
        "options": ["–õ–µ–≤", "–ü–æ–ª—è—Ä–Ω—ã–π –º–µ–¥–≤–µ–¥—å", "–î–µ–ª—å—Ñ–∏–Ω", "–û—Ä—ë–ª"],
        "correct": 1
    },
    {
        "question": "üåø –ö–∞–∫–æ–µ –∏–∑ —ç—Ç–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞–∏–±–æ–ª–µ–µ —Å–Ω–∏–∂–∞–µ—Ç —É–≥–ª–µ—Ä–æ–¥–Ω—ã–π —Å–ª–µ–¥?",
        "options": ["–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—è", "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –º—É—Å–æ—Ä–∞", "–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å—Ç–≤–æ", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±—É–º–∞–∂–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤"],
        "correct": 2
    }
]

def create_main_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row("üßÆ –≠–∫–æ-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "üå± –°–æ–≤–µ—Ç –ø–æ —ç–∫–æ–ª–æ–≥–∏–∏")
    keyboard.row("üìù –ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É", "üì∞ –ù–æ–≤–æ—Å—Ç–∏ —ç–∫–æ–ª–æ–≥–∏–∏")
    return keyboard

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø —ç–∫–æ-–±–æ—Ç. üåø –í—ã–±–µ—Ä–∏ —Ñ—É–Ω–∫—Ü–∏—é:", reply_markup=create_main_keyboard())

@bot.message_handler(func=lambda message: message.text.lower() == "üå± —Å–æ–≤–µ—Ç –ø–æ —ç–∫–æ–ª–æ–≥–∏–∏")
def send_eco_tip(message):
    bot.send_message(message.chat.id, random.choice(eco_tips))

@bot.message_handler(func=lambda message: message.text.lower() == "üßÆ —ç–∫–æ-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
def eco_calculator(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø—Ä–æ–µ–∑–∂–∞–µ—Ç–µ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –≤ –¥–µ–Ω—å: üöó")
    bot.register_next_step_handler(msg, calculate_impact)

def calculate_impact(message):
    try:
        km = float(message.text)
        carbon_footprint = km * 0.2
        trees_needed = carbon_footprint / 22
        bot.send_message(message.chat.id, f"üåç –í–∞—à —É–≥–ª–µ—Ä–æ–¥–Ω—ã–π —Å–ª–µ–¥ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ <b>{carbon_footprint:.2f}</b> –∫–≥ CO2 –≤ –¥–µ–Ω—å.\n–ß—Ç–æ–±—ã –∫–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –≤—ã–±—Ä–æ—Å, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã—Å–∞–¥–∏—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ <b>{trees_needed:.2f}</b> –¥–µ—Ä–µ–≤—å–µ–≤ –≤ –≥–æ–¥.", parse_mode="HTML")
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

@bot.message_handler(func=lambda message: message.text.lower() == "üìù –Ω–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É")
def start_quiz(message):
    user_id = message.chat.id
    random.shuffle(quiz_questions)
    user_quiz_progress[user_id] = {
        "questions": quiz_questions[:3],
        "current_question": 0,
        "correct_answers": 0
    }
    send_question(message.chat.id, user_id)

def send_question(chat_id, user_id):
    state = user_quiz_progress[user_id]
    if state["current_question"] < len(state["questions"]):
        current_q = state["questions"][state["current_question"]]
        markup = types.InlineKeyboardMarkup(row_width=2)
        buttons = [types.InlineKeyboardButton(option, callback_data=f"quiz_{state['current_question']}_{i}") for i, option in enumerate(current_q["options"]) ]
        markup.add(*buttons)
        bot.send_message(chat_id, f"üß© –í–æ–ø—Ä–æ—Å {state['current_question'] + 1} –∏–∑ {len(state['questions'])}:\n\n{current_q['question']}", reply_markup=markup)
    else:
        correct = state["correct_answers"]
        total = len(state["questions"])
        bot.send_message(chat_id, f"üéØ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {correct} –∏–∑ {total} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.\n–≠—Ç–æ {int(correct/total*100)}% –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.")
        del user_quiz_progress[user_id]

@bot.callback_query_handler(func=lambda call: call.data.startswith('quiz_'))
def handle_quiz_answer(call):
    user_id = call.from_user.id
    _, question_idx, answer_idx = call.data.split('_')
    question_idx, answer_idx = int(question_idx), int(answer_idx)
    state = user_quiz_progress[user_id]
    current_q = state["questions"][question_idx]
    is_correct = (answer_idx == current_q["correct"])
    if is_correct:
        state["correct_answers"] += 1
        bot.answer_callback_query(call.id, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        correct_option = current_q["options"][current_q["correct"]]
        bot.answer_callback_query(call.id, f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_option}")
    state["current_question"] += 1
    bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=None)
    send_question(call.message.chat.id, user_id)

@bot.message_handler(func=lambda message: message.text.lower() == "üì∞ –Ω–æ–≤–æ—Å—Ç–∏ —ç–∫–æ–ª–æ–≥–∏–∏")
def send_random_news(message):
    news = get_random_eco_news()
    if news:
        bot.send_message(
            message.chat.id, 
            f"üåø <b>–°–ª—É—á–∞–π–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å –æ–± —ç–∫–æ–ª–æ–≥–∏–∏:</b>\n\n<b>{news['title']}</b>\n\nüîó <a href='{news['link']}'>–ß–∏—Ç–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ</a>", 
            parse_mode="HTML",
            disable_web_page_preview=False
        )
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


bot.infinity_polling()
